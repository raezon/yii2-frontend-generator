<?php

namespace app\modules\ui\generator;

use yii\gii\Generator;
use yii\helpers\Html;
use yii\base\InvalidArgumentException;

class FrontendGenerator extends Generator
{
    public $viewName = 'hello-world'; // Name of the view file to be generated
    public $templateName = 'default'; // Name of the template to use
    public $projectPath; // Path for custom project location
    public $framework; // Framework choice (Vue, React, Angular)
    public $title = 'Hello World';

    // Define templates property
    public $templates = [
        'default' => '@app/modules/ui/generator/templates/default', // Define default template path
    ];

    // Implement the getName() method from Generator class
    public function getName()
    {
        return 'Frontend Hello World Generator';
    }

    public function getDescription()
    {
        return 'This generator creates a simple Hello World view with customizable templates and framework options.';
    }

    public function rules()
    {
        return array_merge(parent::rules(), [
            ['viewName', 'filter', 'filter' => 'trim'],
            ['viewName', 'required'],
            ['viewName', 'match', 'pattern' => '/^\w+(?:-\w+)*$/', 'message' => 'Only word characters and dashes are allowed.'],
            ['templateName', 'string'], // Rule for the template name
            ['projectPath', 'string'], // Rule for the project path
            ['framework', 'string'], // Rule for the framework selection
        ]);
    }

    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            'viewName' => 'View Name',
            'templateName' => 'Template Name', // Label for the new attribute
            'projectPath' => 'Path of Project', // Label for project path
            'framework' => 'Choose Framework', // Label for framework dropdown
        ]);
    }

    public function hints()
    {
        return array_merge(parent::hints(), [
            'viewName' => 'Enter the name of the view file (without .php) to be generated. Only word characters and dashes are allowed.',
            'templateName' => 'Select the template to be used for generating the view.',
            'projectPath' => 'Specify the custom path where you want the generated file to be saved.',
            'framework' => 'Choose which framework (Vue, React, Angular) to use.',
        ]);
    }

    public function generate()
    {
        $files = [];
        $viewPath = $this->projectPath ? \Yii::getAlias($this->projectPath) : \Yii::$app->getViewPath(); // Get custom or default view path

        // Ensure the view path is writable
        if (!is_writable($viewPath)) {
            throw new InvalidArgumentException("View path is not writable: {$viewPath}");
        }

        // Framework-specific logic: Vue, React, Angular
        $this->runNpmCommand($this->framework);

        // Define the content for the view file
        $renderedContent = <<<HTML
<?php
use yii\helpers\Html;

/* @var \$this yii\web\View */

?>

<div class="hello-world">
    <h1>Hello {$this->viewName}!</h1>
    <p>This is a simple Hello World view generated by the Yii2 generator using the {$this->framework} framework.</p>
</div>
HTML;

        // Create the new view file
        $codeFile = new \yii\gii\CodeFile(
            $viewPath . '/' . $this->viewName . '.php',
            $renderedContent
        );

        if (!$codeFile->save()) {
            throw new \RuntimeException("Failed to save the generated file: {$codeFile->path}");
        }

        $files[] = $codeFile;
        return $files;
    }
    public function runNpmCommand($framework)
    {
        $npmCommand = '';

        // Define commands based on the chosen framework
        switch ($framework) {
            case 'vue':
                $npmCommand = 'vue create ' . escapeshellarg($this->viewName) . ' --default';
                break;
            case 'react':
                $npmCommand = 'npx create-react-app ' . escapeshellarg($this->viewName);
                break;
            case 'angular':
                $npmCommand = 'npx @angular/cli new ' . escapeshellarg($this->viewName) . ' --defaults';
                break;
            default:
                throw new InvalidArgumentException('Invalid framework selected.');
        }

        // Specify the directory where you want to create the project
        $projectPath = $this->projectPath ? escapeshellarg($this->projectPath) : escapeshellarg(getcwd());

        // Open a new command prompt window and keep it open
        $command = "start cmd /k \"cd $projectPath && $npmCommand && pause\"";
        exec($command);
    }




}
